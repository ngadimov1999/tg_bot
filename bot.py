import telebot
import config
import random
import myparser
import sqlite3
import dbhelper
from telebot import types
import datetime
import re
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
import os
import graph
import time
listOfFav = []  #–Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ" –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ drawgraph
bot = telebot.TeleBot(config.TOKEN)  #–Ω—É–∂–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
count = 0
admins = [275645967, 720669823, 341859359]  #—Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
superAdmin = [341859359]  #—Å—É–ø–µ—Ä–∞–¥–º–∏–Ω

@bot.message_handler(commands=['start'])
def Welcome(message):
    # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞
    sti = open('—Å—Ç–∏–∫–µ—Ä—ã/hello.tgs', 'rb')
    bot.send_sticker(message.chat.id, sti)

    #—Å–æ–∑–¥–∞–Ω–∏–µ —é–∑–µ—Ä–∞ –∏ –±–∞–∑ –¥–∞–Ω—ã–Ω—Ö
    db=dbhelper.DBHelper('server.db')
#    db.drop_table('favorites')
#    db.drop_table('users')
#    db.setup('favorites',['id','actorName'])
#    db.setup('users',['id','name','lastActive', 'inviteDate','category'])
  
    check_user = db.get_item('id','users','id',message.chat.id)
    if check_user == []:
        user_id = message.chat.id
        name = message.chat.first_name
        date = datetime.datetime.now().strftime("%d-%m-%Y-%H-%M")
#        lastActive 
#        print (name,date)
#        db.add_item('users',f'{user_id},{name},{date},{date},user')
        values = [user_id,name,date,date,'user']
        db.add_item('users',values, primary_key = 'id', primary_value = user_id)
#        db.get_table_info('users')
#    print (db.get_all_items('users'))
    
#    db.add_item('users','')

    #–∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    item_graph = types.KeyboardButton("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ üìä")
    item_favor = types.KeyboardButton("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ üåü")
    a = message.chat.id
#    print (message.chat.id)
#_____________________________________ADMIN_________________________________________
    request = f"SELECT category FROM users WHERE id = {a}"
    bd = dbhelper.DBHelper(dbname="server.db")
    bdRequest = bd.get_flexible_request(request)
    bd.commit()
    if bdRequest[0][0] == "admin":
        item_admin = types.KeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Äçüìä")
        markup.add(item_admin)
    if bdRequest[0][0] == "superadmin":
        item_admin = types.KeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Äçüìä")
        item_superAdmin = types.KeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤ ‚Äçüëæ")
        markup.add(item_admin, item_superAdmin)
#___________________________________________________________________________________
    #–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    markup.add(item_graph, item_favor)
# ______________________________–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ__________________________________
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, {0.first_name}!\n–Ø - <b>{1.first_name}</b>, –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ –∞–∫—Ç–µ—Ä–∞!".format(message.from_user, bot.get_me()),
        parse_mode='html', reply_markup=markup)

#_________________________________
@bot.message_handler(commands=["setadmin"])
def answer(message):
    try:
        command = message.text.split(" ")[1]
        if command == "123456":
            user_id = message.chat.id
            request = f"UPDATE users SET category = 'admin' WHERE id = {user_id}"
            bd = dbhelper.DBHelper(dbname="server.db")
            bdRequest = bd.get_flexible_request(request)
            bd.commit()
    except:
        return

@bot.message_handler(commands=["setsuperadmin"])
def answer(message):
    try:
        command = message.text.split(" ")[1]
        if command == "123456":
            user_id = message.chat.id
            request = f"UPDATE users SET category = 'superadmin' WHERE id = {user_id}"
            bd = dbhelper.DBHelper(dbname="server.db")
            bdRequest = bd.get_flexible_request(request)
            bd.commit()
    except:
        return

cf = []




def DrawGraph2(message):
    cf.append(message.text)
    print('da ', message.text)
    return message.text




# def getStat

def drawGraph(message):  #—Ñ—É–Ω–∫—Ü–∏—è –≥–¥–µ —Å—Ç—Ä–æ–∏—Ç—Å—è –≥—Ä–∞—Ñ


    isFormat = message.text.split(',')
    if len(isFormat)!= 2:
        msg = bot.send_message(message.chat.id, '–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑. –§–æ—Ä–º–∞—Ç: –ò–º—è –§–∞–º–∏–ª–∏—è, –≥–ª—É–±–∏–Ω–∞')
        bot.register_next_step_handler(msg, drawGraph)  #askSource
        return
    if type(isFormat[0])!= str:
        msg = bot.send_message(message.chat.id,'–ê–∫—Ç–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–µ—Ä–æ–º! ;)')
        bot.register_next_step_handler(msg, drawGraph) #askSource
        return
    try:
        isFormat[1] = int(isFormat[1])
    except:
        msg = bot.send_message(message.chat.id,'–ì–ª—É–±–∏–Ω–∞ –∑–∞–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ–º, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑')
        bot.register_next_step_handler(msg, drawGraph) #askSource
        return
    if len(isFormat[0].split()) < 2:
        msg = bot.send_message(message.chat.id,'–ü—Ä–æ–≤–µ—Ä—å —Ñ–∏–æ –∞–∫—Ç–µ—Ä–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!')
        bot.register_next_step_handler(msg, drawGraph) #askSource
        return

    msg = bot.send_message(message.chat.id,
                           f'–ê–∫—Ç–µ—Ä, –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–∞—Ä—Å–∏–º: <b>{isFormat[0].title()}</b>.\n–ü–∞—Ä—Å–∏–º –¥–æ –∫–æ–ª–µ–Ω–∞ ‚Ññ{str(isFormat[1])}',
                           parse_mode='html')

    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ')
    bot.register_next_step_handler(msg, DrawGraph2)
    mistake = myparser.Parser(token=config.TOKEN, chat_id=message.chat.id).get_graph(isFormat[0], isFormat[1])




    if re.search(r'\d', mistake[1]):


        file_json = mistake[1] + ".json"
        done_graph = graph.Graph(file_json, cf[0])  # —Å—é–¥–∞ –Ω–∞–¥–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤
        cf.clear()
        prof_colors = done_graph.print_colors()
        colors_msg = bot.send_message(message.chat.id, prof_colors)

        filename = mistake[1]

        file_png = filename + '.png'
        img = open(f'graphs\\{file_png}', 'rb')

        msg = bot.send_message(message.chat.id, mistake[0])
        bot.send_document(message.chat.id, img)





    # –∑–¥–µ—Å—å —Ç–∏–ø–∞ –≤—ã–≤–æ–¥–∏—Ç—Å—è –≥—Ä–∞—Ñ
    listOfFav.append(message.text.split(",")[0])

    # print(listOfFav)
    markup = types.InlineKeyboardMarkup()
    item_addFav = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å", callback_data="weKnowName")
    item_no = types.InlineKeyboardButton("–ù–µ—Ç", callback_data="No")
    markup.add(item_addFav, item_no)
    bot.send_message(message.chat.id, "–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ?", reply_markup=markup)



    

def addAdmin(message):
    user_id = message.chat.id
    request = f"UPDATE users SET category = 'admin' WHERE id = {user_id}"
    bd = dbhelper.DBHelper(dbname="server.db")
    bdRequest = bd.get_flexible_request(request)
    bd.commit()
    bot.send_message(message.chat.id, "–û–∫!")

def delAdmin(message):
    user_id = message.chat.id
    ser_id = message.chat.id
    request = f"UPDATE users SET category = 'user' WHERE id = {user_id}"
    bd = dbhelper.DBHelper(dbname="server.db")
    bdRequest = bd.get_flexible_request(request)
    bd.commit()
    bot.send_message(message.chat.id, "–û–∫!")

@bot.message_handler(content_types = ['text'])
def Basic(message):
    
    if message.chat.type == 'private':
        request1 = f"SELECT category FROM users WHERE id = {message.chat.id}"
        bd = dbhelper.DBHelper(dbname="server.db")
        bdRequest = bd.get_flexible_request(request1)
        bd.commit()

        db=dbhelper.DBHelper('server.db')
        date = datetime.datetime.now().strftime("%d-%m-%Y-%H-%M")
        db.get_flexible_request(f"UPDATE users SET lastActive = '{date}' where id = '{message.chat.id}'")
#        print (db.get_all_items('users'))
        
        #_________________________________–ü—Ä—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ___________________________________
        if message.text == "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ üìä":
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–∫—Ç–µ—Ä–∞ –∏ –≥–ª—É–±–∏–Ω—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–º—è –§–∞–º–∏–ª–∏—è, –≥–ª—É–±–∏–Ω–∞")
            reply = bot.register_next_step_handler(msg, drawGraph)

        # ________________________________–í—ã–≤–æ–¥ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö__________________________________
        elif message.text == "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ üåü":
            userID = message.chat.id

            markup = types.InlineKeyboardMarkup()

            request = f"SELECT actorName FROM favorites WHERE id = {userID}"

            bd = dbhelper.DBHelper(dbname="server.db")
            bdRequest = bd.get_flexible_request(request)
            bd.commit()
            #–æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞
            sti = open('—Å—Ç–∏–∫–µ—Ä—ã/favorites.tgs', 'rb')
            bot.send_sticker(message.chat.id, sti)
            #–∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º
            item_addFav = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å", callback_data="addFav")
            item_delFav = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data="delFav")
            item_more = types.InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="more")
            if bdRequest == []:
                listToSend = "–í–∞—à —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç!"
                markup.add(item_addFav)
            else:
                listToSend=""
                for i in range(len(bdRequest)):
                    listToSend +=f"{i+1}. " + bdRequest[i][0] + "\n"
                markup.add(item_addFav, item_delFav, item_more)

            #—Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
            bot.send_message(message.chat.id, listToSend, parse_mode="html", reply_markup=markup)
            
        elif message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Äçüìä":
            for admin in admins:
                if admin == message.chat.id:
                    markup = types.InlineKeyboardMarkup()
                    item_newUsers = types.InlineKeyboardButton("–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="new_users")
                    item_active = types.InlineKeyboardButton("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", callback_data="active")
                    item_baza = types.InlineKeyboardButton("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", callback_data="baza")
                    markup.add(item_newUsers,item_active,item_baza)
                    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',reply_markup = markup)

        elif message.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤ ‚Äçüëæ" and bdRequest[0][0] == "superadmin":
            # —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω
            markup = types.InlineKeyboardMarkup()
            item_addAdm = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å", callback_data="addAdmin")
            item_delAdm = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data="delAdmin")
            markup.add(item_addAdm, item_delAdm)
            bot.send_message(message.chat.id, "–£–¥–∞–ª–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞?", reply_markup=markup)

        #____________________________–æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–æ—Ç—Ö–≤–∞—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞__________________________
        else:
            a = random.randint(0, 10)
            if a == 0:
                bot.send_message(message.chat.id, "–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –¥–∞–∂–µ –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å...")
            elif a == 1:
                bot.send_message(message.chat.id, "–ù–µ –º–æ–≥—É –ø–µ—á–∞—Ç–∞—Ç—å, —É –º–µ–Ω—è –∫–ª–µ—à–Ω–∏")
            elif a == 2:
                bot.send_message(message.chat.id, "–û–∫–µ–π))")
            elif a == 3:
                bot.send_message(message.chat.id, "–ü–æ–Ω—è—Ç–Ω–æ")
            elif a == 4:
                bot.send_message(message.chat.id, "–ü—Ä–∏–∫–æ–ª—å–Ω–æ)")
            elif a == 5:
                bot.send_message(message.chat.id, "–î–∞–≤–∞–π –∫–∞–∫-–Ω–∏–±—É–¥—å –ø–æ—Ç–æ–º")
            elif a == 6:
                bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ —Ä–∞—Å—Å–ª—ã—à–∞–ª")
            elif a == 7:
                bot.send_message(message.chat.id, "ü§î")
            elif a == 8:
                bot.send_sticker(message.chat.id, open('—Å—Ç–∏–∫–µ—Ä—ã/hmmm.tgs', 'rb'))
            elif a == 9:
                bot.send_photo(message.chat.id, open('—Ñ–æ—Ç–æ—á–∫–∏/catfish.jpg', 'rb'))
            elif a == 10:
                bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏, –Ω–µ–º–Ω–æ–≥–æ –∑–∞–Ω—è—Ç")
                bot.send_photo(message.chat.id, open('—Ñ–æ—Ç–æ—á–∫–∏/sorry.jpg', 'rb'))
        #_________________________________________________________________________________

def addFav(message):  #—Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    user_id = message.chat.id
    listOfFav.append(message.text)
    actorName = " ".join(listOfFav)
    bot.send_message(message.chat.id, "–°–µ–∫—É–Ω–¥—É!")
    actorName = myparser.Parser(token=config.TOKEN, chat_id=message.chat.id).getCorrectName(actorName)
    listOfFav.clear()
    db = dbhelper.DBHelper("server.db")
    res = db.add_item("favorites", [user_id, actorName[1]], primary_key="actorName", primary_value=actorName[1])
    if res:
        bot.send_message(message.chat.id, res)
    if not res:
        bot.send_message(message.chat.id, "–û–∫!")

def addFavIfWeKnow(message, actor):
    # sql.execute("""CREATE TABLE IF NOT EXISTS favorites (
    #         id TEXT,
    #         actorName TEXT
    #     )""")
    # bd.setup(table_name="favorites", column_list=["id", "actorName"])

    user_id = message.chat.id

    actorName = " ".join(listOfFav)
    listOfFav.clear()
    db = dbhelper.DBHelper("server.db")
    # sql.execute("INSERT INTO favorites VALUES (?, ?)", (user_id, actor))

    res = db.add_item("favorites", [user_id, actorName], primary_key="actorName", primary_value=actorName)
    if res:
        bot.send_message(message.chat.id, res)
    else:
        bot.send_message(message.chat.id, "–û–∫!")

def delFav(message):  #—Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    bd = dbhelper.DBHelper("server.db")
    listOfFavorites = bd.get_flexible_request(f"SELECT * FROM favorites WHERE id = '{message.chat.id}'")
    if re.search(r"\D", message.text):
        msg = bot.send_message(message.chat.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Ü–∏—Ñ—Ä—É. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑")
        bot.register_next_step_handler(msg, delFav)
    else:
        if len(listOfFavorites) < int(message.text):
            msg = bot.send_message(message.chat.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑")
            bot.register_next_step_handler(msg, delFav)
            return
        actorForDelete = listOfFavorites[int(message.text) - 1][1]
        bd.delete_item("favorites", "actorName", actorForDelete)
        bot.send_message(message.chat.id, "–û–∫!")

    # listOfFav.append(message.text)
    # actorName = " ".join(listOfFav)
    # actorName = myparser.Parser(token=config.TOKEN, chat_id=message.chat.id).getCorrectName(actorName)
    # listOfFav.clear()
    # –∑–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —É–¥–∞–ª–µ–Ω–∏–µ(—Ç—Ä–æ–ª–ª–∏–Ω–≥)
    # user_id = message.chat.id
    # db = dbhelper.DBHelper("server.db")
    # res = db.delete_item("favorites", "actorName", actorName[1])
    # if res:
    #     bot.send_message(message.chat.id, res)
    # else:
    #     bot.send_message(message.chat.id, "–û–∫!")

def more(message):
    bd = dbhelper.DBHelper("server.db")
    if re.search(r"\D", message.text):
        msg = bot.send_message(message.chat.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Ü–∏—Ñ—Ä—É. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑")
        bot.register_next_step_handler(msg, more)
    else:
        listOfFavorites = bd.get_flexible_request(f"SELECT * FROM favorites WHERE id = '{message.chat.id}'")
        bd.commit()
        actorForMore = listOfFavorites[int(message.text) - 1][1]
        bot.send_message(message.chat.id, "–°–µ–∫—É–Ω–¥—É!")
        pars = myparser.Parser(token=config.TOKEN, chat_id=message.chat.id).getMaxActorInfo(actorForMore)
        listOfKeys = [*pars]
        listOfValues = list(pars.values())
        listOfResult = []
        for i in range(len(listOfKeys)):
            listOfResult.append(listOfKeys[i]+":"+" "+listOfValues[i]+"\n")
        itogStr = " \n".join(listOfResult).title()
        openPhoto = open('temp\\actor.jpg', "rb")
        bot.send_photo(message.chat.id, openPhoto)
        openPhoto.close()
        os.remove('temp\\actor.jpg')
        bot.send_message(message.chat.id, itogStr)
    
def new_users(message):
    search = re.search('\d{2}-\d{2}-\d{4}', message.text)
    if len(message.text) == 21 and search:
        from_ = message.text[:10]
        to = message.text[11:]
        
    else:
        msg = bot.send_message(message.chat.id,'–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑')
        bot.register_next_step_handler(msg, new_users) #askSource
        return
    
    db=dbhelper.DBHelper('server.db')
    
    to_send = f'<b>–°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n'
    
    from_ = get_date(from_)
    to = get_date(to)
    
    result = db.get_all_items('users', order_by = 'inviteDate ')
#    print (result)
    
    x = []
    y = []
    
    for each in result:
        sumdate = get_date(each[3][:10])
        if each[3][:10] not in x:
            x.append(each[3][:10])
            y.append(1)
        else:
            for i in range(len(x)):
                if x[i] == each[3][:10]:
                    y[i]+=1
        if sumdate >= from_ and sumdate <=to:
            to_send+=f'{each[0]} {each[1]}\n'
     
    if len(to_send) > 35:
        bot.send_message(message.chat.id, to_send, parse_mode = 'html')
        fig, ax = plt.subplots()

        ax.plot(x, y, color = 'r', linewidth = 3)

        #  –¢–æ–∂–µ —Å–∞–º–æ–µ –ø—Ä–æ–¥–µ–ª—ã–≤–∞–µ–º —Å –¥–µ–ª–µ–Ω–∏—è–º–∏ –Ω–∞ –æ—Å–∏ "y":
        ax.yaxis.set_major_locator(ticker.MultipleLocator(1))
        ax.yaxis.set_minor_locator(ticker.MultipleLocator(0.1))

        time = str(datetime.datetime.now())[11:].replace(".",':').replace(":",'')

        plt.savefig(f'temp\\{time}.png')

        ing = open(f'temp\\{time}.png', 'rb')
        bot.send_photo(message.chat.id, ing)
        ing.close()

        os.remove(f'temp\\{time}.png')
    else:
        bot.send_message(message.chat.id, '–ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')

def get_date(line):
    year = int(line[6:10])*12*30
#    print (year)
    month = int(line[3:5])*30
#    print (month)
    day = int(line[0:2])
#    print (day)
    return year+month+day  
    
def more(message):
    bd = dbhelper.DBHelper("server.db")
    listOfFavorites = bd.get_flexible_request(f"SELECT * FROM favorites WHERE id = '{message.chat.id}'")
    if re.search(r"\D", message.text):
        msg = bot.send_message(message.chat.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Ü–∏—Ñ—Ä—É. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑")
        bot.register_next_step_handler(msg, more)
    else:
        if len(listOfFavorites) < int(message.text):
            msg = bot.send_message(message.chat.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑")
            bot.register_next_step_handler(msg, more)
            return
        actorForMore = listOfFavorites[int(message.text) - 1][1]
        bot.send_message(message.chat.id, "–°–µ–∫—É–Ω–¥—É!")
        pars = myparser.Parser(token=config.TOKEN, chat_id=message.chat.id).getMaxActorInfo(actorForMore)
        listOfKeys = [*pars]
        listOfValues = list(pars.values())
        listOfResult = []
        for i in range(len(listOfKeys)):
            listOfResult.append(listOfKeys[i] + ":" + " " + listOfValues[i] + "\n")
        itogStr = " \n".join(listOfResult).title()
        openPhoto = open('temp\\actor.jpg', "rb")
        bot.send_photo(message.chat.id, openPhoto)
        openPhoto.close()
        os.remove('temp\\actor.jpg')
        bot.send_message(message.chat.id, itogStr)


def active(message):
    user_str = '<b>–í—ã–±–µ—Ä–∏—Ç–µ ‚Ññ —é–∑–µ—Ä–∞</b>\n'
    db = dbhelper.DBHelper('server.db')
    user_list = db.get_all_items('users')
    for i in range(len(user_list)):
        user_str += f'{str(i + 1)}. {user_list[i][0]}, {user_list[i][1]}\n'

    msg = bot.send_message(message.chat.id, user_str, parse_mode='html')
    bot.register_next_step_handler(msg, get_user_stat)


def get_user_stat(message):
    db = dbhelper.DBHelper('server.db')
    #    if rownum < int(message.text)
    try:
        user = db.get_flexible_request(f"select * from users where rowid = {message.text}")
        text = f"<b>ID</b>: {user[0][0]}\n<b>Name</b>: {user[0][1]}\n<b>Last active</b>: {user[0][2]}\n<b>Ivite date</b>: {user[0][3]}\n"
        bot.send_message(message.chat.id, text, parse_mode='html')
    except:
        msg = bot.send_message(message.chat.id, "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")
        bot.register_next_step_handler(msg, active)


def all_users(message):
    try:
        db = dbhelper.DBHelper('server.db')
        count_of_users = db.get_flexible_request("select count(*) from users")[0][0]
        bot.send_message(message.chat.id, f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{count_of_users}</b>", parse_mode="html")
    except:
        msg = bot.send_message(message.chat.id, "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")
        bot.register_next_step_handler(msg, all_users)


def get_count_of_actors(message):
    try:
        list_dir = os.listdir(path="actors")
        if list_dir != []:
            count = len(list_dir)
            deep = []
            for el in list_dir:
                for i in range(len(el)):
                    if el[i] == "_":
                        temp = i
                    if el[i] == ".":
                        point = i
                deep.append(int(el[temp + 1:point]))
            bot.send_message(message.chat.id,
                             f"–í—Å–µ–≥–æ –∞–∫—Ç–µ—Ä–æ–≤ –≤ –±–∞–∑–µ: <b>{count}</b>\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–ª–µ—á–æ –≤ –±–∞–∑–µ: <b>{max(deep)}</b>",
                             parse_mode="html")
        else:
            msg = bot.send_message(message.chat.id, "–í –±–∞–∑–µ –Ω–µ—Ç –∞–∫—Ç–µ—Ä–æ–≤")
    except:
        msg = bot.send_message(message.chat.id, "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")
        bot.register_next_step_handler(msg, get_count_of_actors)
#—Ñ—É–Ω–∫—Ü–∏—è –ø–æ –æ—Ç–≤–µ—Ç—É –Ω–∞ –Ω–∞–∂–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ InlineKeyboardButton
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == 'addFav':
                #–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
                msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–∫—Ç–µ—Ä–∞")
                bot.register_next_step_handler(msg, addFav)

            if call.data == "weKnowName":
                actor = "".join(listOfFav)
                addFavIfWeKnow(call.message, actor)

            if call.data == "No":
                bot.send_message(call.message.chat.id, "–û–∫!")

            if call.data == "delFav":
                #—É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
                msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É")
                bot.register_next_step_handler(msg, delFav)

            if call.data == "more":
                msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É")
                bot.register_next_step_handler(msg, more)
                
            if call.data == "new_users":
                '''–Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'''
                msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î-–ú–ú-–ì–ì–ì–ì –î–î-–ú–ú-–ì–ì–ì–ì")
                bot.register_next_step_handler(msg, new_users)

            if call.data == "active":
                '''–Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'''
                markup = types.InlineKeyboardMarkup()
                konkuser = types.InlineKeyboardButton("–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —é–∑–µ—Ä", callback_data="konkuser")

                povsem = types.InlineKeyboardButton("–ü–æ –≤—Å–µ–º", callback_data="povsem")
                markup.add(konkuser, povsem)
                bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', reply_markup=markup)
            #                msg = bot.send_message(call.message.chat.id, markup)
            #                bot.register_next_step_handler(msg, active)

            if call.data == "konkuser":
                '''–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'''
                active(call.message)

            if call.data == "povsem":
                '''–≤—Å–µ —é–∑–µ—Ä—ã'''
                all_users(call.message)

            if call.data == "baza":
                '''–Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'''
                get_count_of_actors(call.message)

            if call.data == "addAdmin":
                msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                bot.register_next_step_handler(msg, addAdmin)
            


    except Exception as e:
        print(repr(e))
#%%
#–Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –±–æ—Ç–∞(–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –∑–∞–ø—É—â–µ–Ω –∫–æ–¥)
if __name__ == '__main__':
    bot.polling(none_stop=True)